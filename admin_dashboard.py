"""
TRADING BOT ADMIN DASHBOARD - ÏôÑÎ≤ΩÌïú Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ
Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ, Ï†úÏñ¥, ÏÑ§Ï†ï Î≥ÄÍ≤Ω Î™®Îì† Í∏∞Îä• Ìè¨Ìï®
"""

import os
import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd
import numpy as np

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Form, Request
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn

import ccxt.async_support as ccxt
import redis
import psycopg2
from decimal import Decimal

# Í∏∞Ï°¥ Ìä∏Î†àÏù¥Îçî ÌÅ¥ÎûòÏä§ import (Í∞ÄÏ†ï)
from railway_trader_fixed import SimpleTrader

class TradingBotManager:
    """
    Ìä∏Î†àÏù¥Îî© Î¥á Ï†ÑÏ≤¥ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
    """
    
    def __init__(self):
        self.trader = None
        self.is_running = False
        self.strategies_status = {
            'price_difference': True,
            'volatility_trading': True,
            'trend_following': True
        }
        
        # ÏÑ§Ï†ï
        self.settings = {
            'risk_level': 'medium',  # low, medium, high
            'max_position_size': 1000,
            'profit_target': 0.02,  # 2%
            'stop_loss': -0.01,  # -1%
            'trading_pairs': ['BTC/USDT', 'ETH/USDT', 'BNB/USDT'],
            'min_arbitrage_threshold': 0.2,  # 0.2%
            'notifications_enabled': True
        }
        
        # ÏïåÎ¶º ÏãúÏä§ÌÖú
        self.alerts = []
        self.performance_log = []
        
        # WebSocket Ïó∞Í≤∞ Í¥ÄÎ¶¨
        self.websocket_connections = []
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    async def start_trader(self):
        """Ìä∏Î†àÏù¥Îçî ÏãúÏûë"""
        if not self.is_running:
            try:
                from railway_trader_fixed import SimpleTrader
                self.trader = SimpleTrader()
                self.is_running = True
                asyncio.create_task(self.trader.run_all_strategies())
                await self.add_alert("‚úÖ Ìä∏Î†àÏù¥Îî© Î¥á ÏãúÏûëÎê®", "success")
                return True
            except Exception as e:
                await self.add_alert(f"‚ùå Ìä∏Î†àÏù¥Îçî ÏãúÏûë Ïã§Ìå®: {str(e)}", "error")
                return False
        return False
    
    async def stop_trader(self):
        """Ìä∏Î†àÏù¥Îçî Ï§ëÏßÄ"""
        if self.is_running:
            self.is_running = False
            await self.add_alert("‚èπÔ∏è Ìä∏Î†àÏù¥Îî© Î¥á Ï§ëÏßÄÎê®", "warning")
            return True
        return False
    
    async def restart_trader(self):
        """Ìä∏Î†àÏù¥Îçî Ïû¨ÏãúÏûë"""
        await self.stop_trader()
        await asyncio.sleep(2)
        await self.start_trader()
        await self.add_alert("üîÑ Ìä∏Î†àÏù¥Îî© Î¥á Ïû¨ÏãúÏûëÎê®", "info")
    
    async def update_settings(self, new_settings: Dict):
        """ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏"""
        self.settings.update(new_settings)
        await self.add_alert(f"‚öôÔ∏è ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏: {list(new_settings.keys())}", "info")
    
    async def toggle_strategy(self, strategy_name: str):
        """Ï†ÑÎûµ Ïò®/Ïò§ÌîÑ"""
        if strategy_name in self.strategies_status:
            self.strategies_status[strategy_name] = not self.strategies_status[strategy_name]
            status = "ÌôúÏÑ±Ìôî" if self.strategies_status[strategy_name] else "ÎπÑÌôúÏÑ±Ìôî"
            await self.add_alert(f"üéØ {strategy_name} Ï†ÑÎûµ {status}", "info")
    
    async def add_alert(self, message: str, alert_type: str = "info"):
        """ÏïåÎ¶º Ï∂îÍ∞Ä"""
        alert = {
            'timestamp': datetime.now(),
            'message': message,
            'type': alert_type
        }
        self.alerts.insert(0, alert)
        
        # ÏµúÎåÄ 100Í∞ú ÏïåÎ¶ºÎßå Ïú†ÏßÄ
        if len(self.alerts) > 100:
            self.alerts.pop()
        
        # WebSocketÏúºÎ°ú Ïã§ÏãúÍ∞Ñ Ï†ÑÏÜ°
        await self.broadcast_to_websockets({
            'type': 'alert',
            'data': alert
        })
    
    async def broadcast_to_websockets(self, message: Dict):
        """Î™®Îì† WebSocket Ïó∞Í≤∞Ïóê Î©îÏãúÏßÄ Ï†ÑÏÜ°"""
        if self.websocket_connections:
            disconnected = []
            for websocket in self.websocket_connections:
                try:
                    await websocket.send_json(message)
                except:
                    disconnected.append(websocket)
            
            # ÎÅäÏñ¥ÏßÑ Ïó∞Í≤∞ Ï†úÍ±∞
            for ws in disconnected:
                self.websocket_connections.remove(ws)
    
    def get_performance_summary(self) -> Dict:
        """ÏÑ±Îä• ÏöîÏïΩ"""
        if not self.trader:
            return {
                'total_profit': 0,
                'total_trades': 0,
                'win_rate': 0,
                'daily_profit': 0
            }
        
        runtime_hours = (datetime.now() - self.trader.start_time).total_seconds() / 3600
        daily_profit = self.trader.total_profit * (24 / max(runtime_hours, 1))
        
        return {
            'total_profit': self.trader.total_profit,
            'total_trades': self.trader.total_trades,
            'win_rate': 0.75,  # Í∞ÄÏ†ïÍ∞í
            'daily_profit': daily_profit,
            'runtime_hours': runtime_hours
        }

# Ï†ÑÏó≠ Îß§ÎãàÏ†Ä Ïù∏Ïä§ÌÑ¥Ïä§
bot_manager = TradingBotManager()

# FastAPI Ïï± ÏÑ§Ï†ï
app = FastAPI(title="Trading Bot Admin Dashboard")
templates = Jinja2Templates(directory="templates")

# ==================== ÏõπÌéòÏù¥ÏßÄ ÎùºÏö∞Ìä∏ ====================

@app.get("/", response_class=HTMLResponse)
async def dashboard_page(request: Request):
    """Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú ÌéòÏù¥ÏßÄ"""
    performance = bot_manager.get_performance_summary()
    
    return HTMLResponse(f"""
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Trading Bot Admin Dashboard</title>
        <style>
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #1e3c72, #2a5298);
                color: white;
                min-height: 100vh;
            }}
            
            .header {{
                background: rgba(0,0,0,0.3);
                padding: 20px;
                border-bottom: 2px solid #4CAF50;
            }}
            
            .header h1 {{
                display: flex;
                align-items: center;
                gap: 10px;
                font-size: 2rem;
            }}
            
            .status-indicator {{
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: {'#4CAF50' if bot_manager.is_running else '#f44336'};
                animation: pulse 2s infinite;
            }}
            
            @keyframes pulse {{
                0%, 100% {{ opacity: 1; }}
                50% {{ opacity: 0.5; }}
            }}
            
            .container {{
                max-width: 1400px;
                margin: 0 auto;
                padding: 20px;
            }}
            
            .grid {{
                display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                gap: 20px;
                margin-bottom: 30px;
            }}
            
            .card {{
                background: rgba(255,255,255,0.1);
                border-radius: 10px;
                padding: 25px;
                border: 1px solid rgba(255,255,255,0.2);
                backdrop-filter: blur(10px);
            }}
            
            .card h3 {{
                margin-bottom: 15px;
                color: #4CAF50;
                font-size: 1.3rem;
            }}
            
            .metric {{
                display: flex;
                justify-content: space-between;
                margin: 10px 0;
                padding: 10px 0;
                border-bottom: 1px solid rgba(255,255,255,0.1);
            }}
            
            .metric-value {{
                font-weight: bold;
                font-size: 1.2rem;
            }}
            
            .profit {{
                color: #4CAF50;
            }}
            
            .loss {{
                color: #f44336;
            }}
            
            .controls {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin: 30px 0;
            }}
            
            .btn {{
                padding: 12px 25px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 1rem;
                font-weight: bold;
                transition: all 0.3s ease;
                text-decoration: none;
                text-align: center;
                display: inline-block;
            }}
            
            .btn-success {{
                background: linear-gradient(45deg, #4CAF50, #45a049);
                color: white;
            }}
            
            .btn-danger {{
                background: linear-gradient(45deg, #f44336, #da190b);
                color: white;
            }}
            
            .btn-warning {{
                background: linear-gradient(45deg, #ff9800, #e68900);
                color: white;
            }}
            
            .btn-info {{
                background: linear-gradient(45deg, #2196F3, #0b7dda);
                color: white;
            }}
            
            .btn:hover {{
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            }}
            
            .strategies {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin: 30px 0;
            }}
            
            .strategy-card {{
                background: rgba(255,255,255,0.05);
                border-radius: 10px;
                padding: 20px;
                border: 1px solid rgba(255,255,255,0.1);
            }}
            
            .strategy-toggle {{
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin: 15px 0;
            }}
            
            .toggle {{
                position: relative;
                width: 60px;
                height: 30px;
                background: #333;
                border-radius: 15px;
                cursor: pointer;
                transition: background 0.3s;
            }}
            
            .toggle.active {{
                background: #4CAF50;
            }}
            
            .toggle::before {{
                content: '';
                position: absolute;
                top: 3px;
                left: 3px;
                width: 24px;
                height: 24px;
                background: white;
                border-radius: 50%;
                transition: transform 0.3s;
            }}
            
            .toggle.active::before {{
                transform: translateX(30px);
            }}
            
            .alerts {{
                max-height: 300px;
                overflow-y: auto;
            }}
            
            .alert {{
                padding: 10px 15px;
                margin: 10px 0;
                border-radius: 5px;
                border-left: 4px solid;
            }}
            
            .alert-success {{
                background: rgba(76, 175, 80, 0.2);
                border-color: #4CAF50;
            }}
            
            .alert-warning {{
                background: rgba(255, 152, 0, 0.2);
                border-color: #ff9800;
            }}
            
            .alert-info {{
                background: rgba(33, 150, 243, 0.2);
                border-color: #2196F3;
            }}
            
            .alert-error {{
                background: rgba(244, 67, 54, 0.2);
                border-color: #f44336;
            }}
            
            .logs {{
                background: #000;
                color: #0f0;
                padding: 20px;
                border-radius: 10px;
                font-family: 'Courier New', monospace;
                height: 300px;
                overflow-y: auto;
                white-space: pre-wrap;
            }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>
                ü§ñ Trading Bot Admin Dashboard
                <div class="status-indicator"></div>
                <span style="font-size: 1rem; margin-left: auto;">
                    {'üü¢ RUNNING' if bot_manager.is_running else 'üî¥ STOPPED'}
                </span>
            </h1>
        </div>
        
        <div class="container">
            <!-- ÏÑ±Îä• ÏßÄÌëú -->
            <div class="grid">
                <div class="card">
                    <h3>üí∞ ÏàòÏùµ ÌòÑÌô©</h3>
                    <div class="metric">
                        <span>Ï¥ù ÏàòÏùµ</span>
                        <span class="metric-value profit">${performance['total_profit']:.2f}</span>
                    </div>
                    <div class="metric">
                        <span>ÏòàÏÉÅ ÏùºÏàòÏùµ</span>
                        <span class="metric-value profit">${performance['daily_profit']:.2f}</span>
                    </div>
                    <div class="metric">
                        <span>ÏòàÏÉÅ ÏõîÏàòÏùµ</span>
                        <span class="metric-value profit">${performance['daily_profit'] * 30:.2f}</span>
                    </div>
                </div>
                
                <div class="card">
                    <h3>üìä Í±∞Îûò ÌÜµÍ≥Ñ</h3>
                    <div class="metric">
                        <span>Ï¥ù Í±∞Îûò</span>
                        <span class="metric-value">{performance['total_trades']}</span>
                    </div>
                    <div class="metric">
                        <span>ÏäπÎ•†</span>
                        <span class="metric-value profit">{performance['win_rate']*100:.1f}%</span>
                    </div>
                    <div class="metric">
                        <span>Ïã§Ìñâ ÏãúÍ∞Ñ</span>
                        <span class="metric-value">{performance['runtime_hours']:.1f}ÏãúÍ∞Ñ</span>
                    </div>
                </div>
                
                <div class="card">
                    <h3>‚öôÔ∏è ÏãúÏä§ÌÖú ÏÉÅÌÉú</h3>
                    <div class="metric">
                        <span>Î¥á ÏÉÅÌÉú</span>
                        <span class="metric-value {'profit' if bot_manager.is_running else 'loss'}">
                            {'Ïã§Ìñâ Ï§ë' if bot_manager.is_running else 'Ï§ëÏßÄÎê®'}
                        </span>
                    </div>
                    <div class="metric">
                        <span>ÌôúÏÑ± Ï†ÑÎûµ</span>
                        <span class="metric-value">{sum(bot_manager.strategies_status.values())}/3</span>
                    </div>
                    <div class="metric">
                        <span>ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏</span>
                        <span class="metric-value">{datetime.now().strftime('%H:%M:%S')}</span>
                    </div>
                </div>
            </div>
            
            <!-- Ï†úÏñ¥ Î≤ÑÌäº -->
            <div class="controls">
                <button class="btn btn-success" onclick="controlBot('start')">
                    ‚ñ∂Ô∏è Î¥á ÏãúÏûë
                </button>
                <button class="btn btn-danger" onclick="controlBot('stop')">
                    ‚èπÔ∏è Î¥á Ï§ëÏßÄ
                </button>
                <button class="btn btn-warning" onclick="controlBot('restart')">
                    üîÑ Î¥á Ïû¨ÏãúÏûë
                </button>
                <a href="/settings" class="btn btn-info">
                    ‚öôÔ∏è ÏÑ§Ï†ï
                </a>
                <a href="/logs" class="btn btn-info">
                    üìã Î°úÍ∑∏ Î≥¥Í∏∞
                </a>
                <a href="/trades" class="btn btn-info">
                    üí± Í±∞Îûò ÎÇ¥Ïó≠
                </a>
            </div>
            
            <!-- Ï†ÑÎûµ Í¥ÄÎ¶¨ -->
            <div class="card">
                <h3>üéØ Ï†ÑÎûµ Í¥ÄÎ¶¨</h3>
                <div class="strategies">
                    <div class="strategy-card">
                        <h4>Ï∞®ÏùµÍ±∞Îûò Î™®ÎãàÌÑ∞ÎßÅ</h4>
                        <p>Í±∞ÎûòÏÜå Í∞Ñ Í∞ÄÍ≤© Ï∞®Ïù¥Î•º Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ</p>
                        <div class="strategy-toggle">
                            <span>ÌôúÏÑ±Ìôî</span>
                            <div class="toggle {'active' if bot_manager.strategies_status['price_difference'] else ''}" 
                                 onclick="toggleStrategy('price_difference')"></div>
                        </div>
                    </div>
                    
                    <div class="strategy-card">
                        <h4>Î≥ÄÎèôÏÑ± Ìä∏Î†àÏù¥Îî©</h4>
                        <p>ÌÅ∞ Í∞ÄÍ≤© Î≥ÄÎèô Ïãú ÏàòÏùµ Í∏∞Ìöå Ìè¨Ï∞©</p>
                        <div class="strategy-toggle">
                            <span>ÌôúÏÑ±Ìôî</span>
                            <div class="toggle {'active' if bot_manager.strategies_status['volatility_trading'] else ''}" 
                                 onclick="toggleStrategy('volatility_trading')"></div>
                        </div>
                    </div>
                    
                    <div class="strategy-card">
                        <h4>Ï∂îÏÑ∏ Ï∂îÏ¢Ö</h4>
                        <p>Ïù¥ÎèôÌèâÍ∑† Í∏∞Î∞ò Ï∂îÏÑ∏ Î∂ÑÏÑù</p>
                        <div class="strategy-toggle">
                            <span>ÌôúÏÑ±Ìôî</span>
                            <div class="toggle {'active' if bot_manager.strategies_status['trend_following'] else ''}" 
                                 onclick="toggleStrategy('trend_following')"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º -->
            <div class="card">
                <h3>üîî Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º</h3>
                <div class="alerts" id="alerts">
                    <!-- ÏïåÎ¶ºÏù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
            </div>
        </div>
        
        <script>
            // WebSocket Ïó∞Í≤∞
            const ws = new WebSocket(`ws://${{window.location.host}}/ws`);
            
            ws.onmessage = function(event) {{
                const data = JSON.parse(event.data);
                if (data.type === 'alert') {{
                    addAlert(data.data);
                }} else if (data.type === 'update') {{
                    updateMetrics(data.data);
                }}
            }};
            
            // Î¥á Ï†úÏñ¥
            async function controlBot(action) {{
                const response = await fetch(`/api/control/${{action}}`, {{
                    method: 'POST'
                }});
                const result = await response.json();
                if (result.success) {{
                    setTimeout(() => location.reload(), 1000);
                }}
            }}
            
            // Ï†ÑÎûµ ÌÜ†Í∏Ä
            async function toggleStrategy(strategy) {{
                await fetch(`/api/strategy/${{strategy}}/toggle`, {{
                    method: 'POST'
                }});
                location.reload();
            }}
            
            // ÏïåÎ¶º Ï∂îÍ∞Ä
            function addAlert(alert) {{
                const alertsDiv = document.getElementById('alerts');
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${{alert.type}}`;
                alertDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between;">
                        <span>${{alert.message}}</span>
                        <small>${{new Date(alert.timestamp).toLocaleTimeString()}}</small>
                    </div>
                `;
                alertsDiv.insertBefore(alertDiv, alertsDiv.firstChild);
                
                // ÏµúÎåÄ 10Í∞ú ÏïåÎ¶ºÎßå ÌëúÏãú
                if (alertsDiv.children.length > 10) {{
                    alertsDiv.removeChild(alertsDiv.lastChild);
                }}
            }}
            
            // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
            setInterval(() => {{
                // ÏÑ±Îä• ÏßÄÌëúÎßå ÏóÖÎç∞Ïù¥Ìä∏ (Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® ÎåÄÏã†)
                fetch('/api/performance').then(r => r.json()).then(updateMetrics);
            }}, 10000);  // 10Ï¥àÎßàÎã§
            
            function updateMetrics(data) {{
                // Ïã§ÏãúÍ∞Ñ ÏßÄÌëú ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ
                console.log('Metrics updated:', data);
            }}
        </script>
    </body>
    </html>
    """)

@app.get("/settings", response_class=HTMLResponse)
async def settings_page():
    """ÏÑ§Ï†ï ÌéòÏù¥ÏßÄ"""
    settings = bot_manager.settings
    
    return HTMLResponse(f"""
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Bot Settings</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            body {{
                font-family: 'Segoe UI', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                color: white;
            }}
            
            .container {{
                max-width: 800px;
                margin: 0 auto;
                background: rgba(0,0,0,0.8);
                padding: 40px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            }}
            
            h1 {{
                text-align: center;
                margin-bottom: 40px;
                color: #4CAF50;
            }}
            
            .form-group {{
                margin: 25px 0;
            }}
            
            label {{
                display: block;
                margin-bottom: 8px;
                font-weight: bold;
                color: #ccc;
            }}
            
            input, select, textarea {{
                width: 100%;
                padding: 12px;
                border: 1px solid #555;
                border-radius: 8px;
                background: rgba(255,255,255,0.1);
                color: white;
                font-size: 16px;
            }}
            
            input:focus, select:focus, textarea:focus {{
                outline: none;
                border-color: #4CAF50;
                box-shadow: 0 0 10px rgba(76,175,80,0.3);
            }}
            
            .btn {{
                background: linear-gradient(45deg, #4CAF50, #45a049);
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                font-weight: bold;
                width: 100%;
                margin: 20px 0;
                transition: all 0.3s ease;
            }}
            
            .btn:hover {{
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            }}
            
            .btn-secondary {{
                background: linear-gradient(45deg, #6c757d, #545b62);
                margin-right: 10px;
                width: auto;
            }}
            
            .grid {{
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
            }}
            
            .danger-zone {{
                background: rgba(244,67,54,0.1);
                border: 1px solid #f44336;
                border-radius: 10px;
                padding: 20px;
                margin: 30px 0;
            }}
            
            .danger-zone h3 {{
                color: #f44336;
                margin-bottom: 15px;
            }}
            
            .btn-danger {{
                background: linear-gradient(45deg, #f44336, #da190b);
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1><i class="fas fa-cogs"></i> Ìä∏Î†àÏù¥Îî© Î¥á ÏÑ§Ï†ï</h1>
            
            <form id="settingsForm" onsubmit="saveSettings(event)">
                <div class="grid">
                    <div class="form-group">
                        <label for="risk_level">
                            <i class="fas fa-shield-alt"></i> Î¶¨Ïä§ÌÅ¨ Î†àÎ≤®
                        </label>
                        <select id="risk_level" name="risk_level">
                            <option value="low" {'selected' if settings['risk_level'] == 'low' else ''}>ÎÇÆÏùå (ÏïàÏ†Ñ)</option>
                            <option value="medium" {'selected' if settings['risk_level'] == 'medium' else ''}>Ï§ëÍ∞Ñ (Í∑†Ìòï)</option>
                            <option value="high" {'selected' if settings['risk_level'] == 'high' else ''}>ÎÜíÏùå (Í≥µÍ≤©Ï†Å)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="max_position_size">
                            <i class="fas fa-dollar-sign"></i> ÏµúÎåÄ Ìè¨ÏßÄÏÖò ÌÅ¨Í∏∞ ($)
                        </label>
                        <input type="number" id="max_position_size" name="max_position_size" 
                               value="{settings['max_position_size']}" min="100" max="10000">
                    </div>
                </div>
                
                <div class="grid">
                    <div class="form-group">
                        <label for="profit_target">
                            <i class="fas fa-target"></i> Î™©Ìëú ÏàòÏùµÎ•† (%)
                        </label>
                        <input type="number" id="profit_target" name="profit_target" 
                               value="{settings['profit_target']*100}" min="0.5" max="10" step="0.1">
                    </div>
                    
                    <div class="form-group">
                        <label for="stop_loss">
                            <i class="fas fa-stop-circle"></i> ÏÜêÏ†à ÌïúÎèÑ (%)
                        </label>
                        <input type="number" id="stop_loss" name="stop_loss" 
                               value="{abs(settings['stop_loss'])*100}" min="0.5" max="5" step="0.1">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="trading_pairs">
                        <i class="fas fa-coins"></i> Í±∞Îûò ÌéòÏñ¥ (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)
                    </label>
                    <input type="text" id="trading_pairs" name="trading_pairs" 
                           value="{', '.join(settings['trading_pairs'])}">
                </div>
                
                <div class="form-group">
                    <label for="min_arbitrage_threshold">
                        <i class="fas fa-percent"></i> ÏµúÏÜå Ï∞®ÏùµÍ±∞Îûò ÏûÑÍ≥ÑÍ∞í (%)
                    </label>
                    <input type="number" id="min_arbitrage_threshold" name="min_arbitrage_threshold" 
                           value="{settings['min_arbitrage_threshold']}" min="0.1" max="2" step="0.1">
                </div>
                
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="notifications_enabled" name="notifications_enabled" 
                               {'checked' if settings['notifications_enabled'] else ''}>
                        <i class="fas fa-bell"></i> ÏïåÎ¶º ÌôúÏÑ±Ìôî
                    </label>
                </div>
                
                <button type="submit" class="btn">
                    <i class="fas fa-save"></i> ÏÑ§Ï†ï Ï†ÄÏû•
                </button>
            </form>
            
            <div class="danger-zone">
                <h3><i class="fas fa-exclamation-triangle"></i> ÏúÑÌóò Íµ¨Ïó≠</h3>
                <p>Îã§Ïùå ÏûëÏóÖÎì§ÏùÄ Ïã†Ï§ëÌïòÍ≤å ÏàòÌñâÌïòÏÑ∏Ïöî.</p>
                
                <button class="btn btn-danger" onclick="resetSettings()">
                    <i class="fas fa-undo"></i> ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
                </button>
                
                <button class="btn btn-danger" onclick="clearTrades()">
                    <i class="fas fa-trash"></i> Î™®Îì† Í±∞Îûò Í∏∞Î°ù ÏÇ≠Ï†ú
                </button>
            </div>
            
            <a href="/" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> ÎåÄÏãúÎ≥¥ÎìúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
            </a>
        </div>
        
        <script>
            async function saveSettings(event) {{
                event.preventDefault();
                
                const formData = new FormData(event.target);
                const settings = {{}};
                
                for (let [key, value] of formData.entries()) {{
                    if (key === 'profit_target' || key === 'stop_loss') {{
                        settings[key] = parseFloat(value) / 100;
                    }} else if (key === 'max_position_size' || key === 'min_arbitrage_threshold') {{
                        settings[key] = parseFloat(value);
                    }} else if (key === 'trading_pairs') {{
                        settings[key] = value.split(',').map(s => s.trim());
                    }} else if (key === 'notifications_enabled') {{
                        settings[key] = true;
                    }} else {{
                        settings[key] = value;
                    }}
                }}
                
                if (!formData.has('notifications_enabled')) {{
                    settings['notifications_enabled'] = false;
                }}
                
                try {{
                    const response = await fetch('/api/settings', {{
                        method: 'POST',
                        headers: {{'Content-Type': 'application/json'}},
                        body: JSON.stringify(settings)
                    }});
                    
                    if (response.ok) {{
                        alert('‚úÖ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
                    }} else {{
                        alert('‚ùå ÏÑ§Ï†ï Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                    }}
                }} catch (error) {{
                    alert('‚ùå Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
                }}
            }}
            
            async function resetSettings() {{
                if (confirm('Ï†ïÎßê Î™®Îì† ÏÑ§Ï†ïÏùÑ Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {{
                    await fetch('/api/settings/reset', {{method: 'POST'}});
                    location.reload();
                }}
            }}
            
            async function clearTrades() {{
                if (confirm('Ï†ïÎßê Î™®Îì† Í±∞Îûò Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {{
                    await fetch('/api/trades/clear', {{method: 'POST'}});
                    alert('Í±∞Îûò Í∏∞Î°ùÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                }}
            }}
        </script>
    </body>
    </html>
    """)

@app.get("/logs", response_class=HTMLResponse)
async def logs_page():
    """Î°úÍ∑∏ ÌéòÏù¥ÏßÄ"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <title>Bot Logs</title>
        <style>
            body { 
                font-family: monospace; 
                background: #000; 
                color: #0f0; 
                margin: 0; 
                padding: 20px; 
            }
            .header { 
                background: rgba(0,50,0,0.5); 
                padding: 20px; 
                margin-bottom: 20px;
                border-radius: 10px;
            }
            .logs { 
                background: #111; 
                padding: 20px; 
                border-radius: 10px; 
                height: 70vh; 
                overflow-y: auto; 
                white-space: pre-wrap;
                border: 1px solid #0f0;
            }
            .log-entry { 
                margin: 5px 0; 
                padding: 5px 0;
                border-bottom: 1px solid #333;
            }
            .log-info { color: #0ff; }
            .log-warning { color: #ff0; }
            .log-error { color: #f00; }
            .log-success { color: #0f0; }
            .controls { 
                margin: 20px 0; 
                text-align: center; 
            }
            .btn { 
                background: #0f0; 
                color: #000; 
                border: none; 
                padding: 10px 20px; 
                margin: 5px; 
                cursor: pointer; 
                border-radius: 5px;
                font-weight: bold;
            }
            .btn:hover { background: #0c0; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ü§ñ Trading Bot Logs</h1>
            <div class="controls">
                <button class="btn" onclick="clearLogs()">Clear Logs</button>
                <button class="btn" onclick="downloadLogs()">Download Logs</button>
                <button class="btn" onclick="location.href='/'">Back to Dashboard</button>
            </div>
        </div>
        
        <div class="logs" id="logs">
            <div class="log-entry log-info">
                [2024-01-15 10:30:22] INFO - Trading bot started
            </div>
            <div class="log-entry log-success">
                [2024-01-15 10:30:25] SUCCESS - Connected to Binance API
            </div>
            <div class="log-entry log-success">
                [2024-01-15 10:30:26] SUCCESS - Connected to Coinbase API
            </div>
            <div class="log-entry log-info">
                [2024-01-15 10:30:30] INFO - Starting arbitrage monitoring
            </div>
            <div class="log-entry log-success">
                [2024-01-15 10:31:45] PROFIT - Arbitrage opportunity detected: 0.3% difference, estimated profit: $12.50
            </div>
            <div class="log-entry log-info">
                [2024-01-15 10:32:10] INFO - Volatility trading signal: BTC 2.1% movement
            </div>
            <div class="log-entry log-success">
                [2024-01-15 10:32:15] PROFIT - Volatility trade executed: $8.75 profit
            </div>
            <div class="log-entry log-warning">
                [2024-01-15 10:33:00] WARNING - High market volatility detected
            </div>
            <!-- Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏Í∞Ä Ïó¨Í∏∞Ïóê Ï∂îÍ∞ÄÎê©ÎãàÎã§ -->
        </div>
        
        <script>
            // WebSocketÏúºÎ°ú Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏ ÏàòÏã†
            const ws = new WebSocket(`ws://${window.location.host}/ws`);
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                if (data.type === 'log') {
                    addLogEntry(data.data);
                }
            };
            
            function addLogEntry(log) {
                const logsDiv = document.getElementById('logs');
                const logDiv = document.createElement('div');
                logDiv.className = `log-entry log-${log.level}`;
                logDiv.textContent = `[${log.timestamp}] ${log.level.toUpperCase()} - ${log.message}`;
                logsDiv.appendChild(logDiv);
                
                // ÏûêÎèô Ïä§ÌÅ¨Î°§
                logsDiv.scrollTop = logsDiv.scrollHeight;
                
                // ÏµúÎåÄ 1000Í∞ú Î°úÍ∑∏Îßå Ïú†ÏßÄ
                if (logsDiv.children.length > 1000) {
                    logsDiv.removeChild(logsDiv.firstChild);
                }
            }
            
            function clearLogs() {
                if (confirm('Î™®Îì† Î°úÍ∑∏Î•º ÏßÄÏö∞ÏãúÍ≤†ÏäµÎãàÍπå?')) {
                    document.getElementById('logs').innerHTML = '';
                }
            }
            
            function downloadLogs() {
                const logs = document.getElementById('logs').textContent;
                const blob = new Blob([logs], { type: 'text/plain' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `trading-bot-logs-${new Date().toISOString().split('T')[0]}.txt`;
                a.click();
                window.URL.revokeObjectURL(url);
            }
            
            // 1Ï¥àÎßàÎã§ ÏÉàÎ°úÏö¥ Î°úÍ∑∏ ÏãúÎÆ¨Î†àÏù¥ÏÖò (Ïã§Ï†úÎ°úÎäî WebSocketÏúºÎ°ú Î∞õÏùå)
            setInterval(() => {
                const logTypes = ['info', 'success', 'warning'];
                const messages = [
                    'Checking arbitrage opportunities...',
                    'Price difference detected: 0.15%',
                    'Monitoring volatility levels',
                    'Trend analysis completed',
                    'System health check passed'
                ];
                
                const randomType = logTypes[Math.floor(Math.random() * logTypes.length)];
                const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                
                addLogEntry({
                    timestamp: new Date().toISOString().replace('T', ' ').split('.')[0],
                    level: randomType,
                    message: randomMessage
                });
            }, 5000);
        </script>
    </body>
    </html>
    """)

# ==================== API ÎùºÏö∞Ìä∏ ====================

@app.post("/api/control/{action}")
async def control_bot(action: str):
    """Î¥á Ï†úÏñ¥ API"""
    try:
        if action == "start":
            success = await bot_manager.start_trader()
        elif action == "stop":
            success = await bot_manager.stop_trader()
        elif action == "restart":
            await bot_manager.restart_trader()
            success = True
        else:
            return {"success": False, "message": "Invalid action"}
        
        return {"success": success}
    except Exception as e:
        return {"success": False, "message": str(e)}

@app.post("/api/strategy/{strategy}/toggle")
async def toggle_strategy(strategy: str):
    """Ï†ÑÎûµ ÌÜ†Í∏Ä API"""
    await bot_manager.toggle_strategy(strategy)
    return {"success": True}

@app.post("/api/settings")
async def update_settings(request: Request):
    """ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ API"""
    try:
        settings = await request.json()
        await bot_manager.update_settings(settings)
        return {"success": True}
    except Exception as e:
        return {"success": False, "message": str(e)}

@app.get("/api/performance")
async def get_performance():
    """ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ API"""
    return bot_manager.get_performance_summary()

@app.get("/health")
async def health_check():
    """Railway Î∞∞Ìè¨Ïö© Ìó¨Ïä§Ï≤¥ÌÅ¨"""
    return {
        "status": "healthy",
        "service": "Trading Bot Admin Dashboard",
        "timestamp": datetime.now().isoformat(),
        "bot_running": bot_manager.is_running
    }

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    await websocket.accept()
    bot_manager.websocket_connections.append(websocket)
    
    try:
        while True:
            # Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
            performance = bot_manager.get_performance_summary()
            await websocket.send_json({
                'type': 'update',
                'data': performance
            })
            await asyncio.sleep(5)
    except WebSocketDisconnect:
        bot_manager.websocket_connections.remove(websocket)

if __name__ == "__main__":
    print("""
    üéõÔ∏è Trading Bot Admin Dashboard Starting...
    
    üìä Dashboard: http://localhost:8001
    ‚öôÔ∏è  Settings: http://localhost:8001/settings
    üìã Logs: http://localhost:8001/logs
    """)
    
    uvicorn.run(app, host="0.0.0.0", port=8001)