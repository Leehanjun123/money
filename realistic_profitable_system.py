"""
üí∞ Ïã§Ï†ú ÏàòÏùµ Ï∞ΩÏ∂ú Í∞ÄÎä•Ìïú ÌòÑÏã§Ï†Å Ìä∏Î†àÏù¥Îî© ÏãúÏä§ÌÖú

Î™©Ìëú: ÏóÖÍ≥Ñ ÌÉë 0.001% ‚Üí 1% ÏàòÏ§Ä ÎèÑÎã¨
- Ïã§Ï†ú ÏãúÏû• Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
- Í≤ÄÏ¶ùÎêú Í∏∞Ïà†Ï†Å Î∂ÑÏÑù
- Î∞±ÌÖåÏä§ÌåÖ Í∏∞Î∞ò Ï†ÑÎûµ
- Ï†êÏßÑÏ†Å Ïã§Ï†ú ÏûêÍ∏à Ìà¨ÏûÖ
"""

import asyncio
import json
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import numpy as np
from dataclasses import dataclass
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, BackgroundTasks
from fastapi.responses import HTMLResponse
import uvicorn
import aiohttp
import time

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TechnicalIndicators:
    rsi: float
    sma_20: float
    ema_12: float
    ema_26: float
    macd: float
    bb_upper: float
    bb_lower: float
    volume_sma: float

@dataclass 
class MarketData:
    symbol: str
    price: float
    volume: float
    timestamp: datetime
    high_24h: float
    low_24h: float
    change_24h: float

@dataclass
class TradingSignal:
    symbol: str
    action: str  # 'buy', 'sell', 'hold'
    confidence: float  # 0.0 to 1.0
    price_target: float
    stop_loss: float
    reasoning: str
    timestamp: datetime

class RealMarketDataProvider:
    """Ïã§Ï†ú ÏãúÏû• Îç∞Ïù¥ÌÑ∞ Ï†úÍ≥µÏûê"""
    
    def __init__(self):
        self.price_history: Dict[str, List[float]] = {}
        self.volume_history: Dict[str, List[float]] = {}
        self.last_update = {}
        
    async def get_binance_data(self, symbol: str) -> Optional[MarketData]:
        """Î∞îÏù¥ÎÇ∏Ïä§ ÌçºÎ∏îÎ¶≠ APIÏóêÏÑú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            async with aiohttp.ClientSession() as session:
                # 24ÏãúÍ∞Ñ Í∞ÄÍ≤© ÌÜµÍ≥Ñ
                ticker_url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol.replace('/', '')}"
                async with session.get(ticker_url, timeout=5) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        return MarketData(
                            symbol=symbol,
                            price=float(data['lastPrice']),
                            volume=float(data['volume']),
                            timestamp=datetime.now(),
                            high_24h=float(data['highPrice']),
                            low_24h=float(data['lowPrice']),
                            change_24h=float(data['priceChangePercent'])
                        )
        except Exception as e:
            logger.error(f"Î∞îÏù¥ÎÇ∏Ïä§ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå® {symbol}: {e}")
            return None
    
    async def get_coinbase_data(self, symbol: str) -> Optional[MarketData]:
        """ÏΩîÏù∏Î≤†Ïù¥Ïä§ ÌçºÎ∏îÎ¶≠ API Î∞±ÏóÖ"""
        try:
            cb_symbol = symbol.replace('/', '-')
            async with aiohttp.ClientSession() as session:
                url = f"https://api.coinbase.com/v2/exchange-rates?currency={cb_symbol.split('-')[0]}"
                async with session.get(url, timeout=5) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'data' in data and 'rates' in data['data']:
                            rates = data['data']['rates']
                            usd_rate = float(rates.get('USD', 0))
                            
                            if usd_rate > 0:
                                return MarketData(
                                    symbol=symbol,
                                    price=usd_rate,
                                    volume=0,  # ÏΩîÏù∏Î≤†Ïù¥Ïä§Îäî Î≥ºÎ•® Ï†ïÎ≥¥ Ï†úÌïúÏ†Å
                                    timestamp=datetime.now(),
                                    high_24h=usd_rate * 1.02,
                                    low_24h=usd_rate * 0.98,
                                    change_24h=0
                                )
        except Exception as e:
            logger.error(f"ÏΩîÏù∏Î≤†Ïù¥Ïä§ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå® {symbol}: {e}")
            return None

    async def get_market_data(self, symbol: str) -> Optional[MarketData]:
        """Ïã§Ï†ú ÏãúÏû• Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Îã§Ï§ë ÏÜåÏä§)"""
        # Î∞îÏù¥ÎÇ∏Ïä§ Î®ºÏ†Ä ÏãúÎèÑ
        data = await self.get_binance_data(symbol)
        if data:
            self._update_history(symbol, data)
            return data
        
        # Î∞îÏù¥ÎÇ∏Ïä§ Ïã§Ìå®Ïãú ÏΩîÏù∏Î≤†Ïù¥Ïä§ ÏãúÎèÑ
        data = await self.get_coinbase_data(symbol)
        if data:
            self._update_history(symbol, data)
            return data
        
        return None
    
    def _update_history(self, symbol: str, data: MarketData):
        """Í∞ÄÍ≤© ÌûàÏä§ÌÜ†Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏"""
        if symbol not in self.price_history:
            self.price_history[symbol] = []
            self.volume_history[symbol] = []
        
        self.price_history[symbol].append(data.price)
        self.volume_history[symbol].append(data.volume)
        
        # ÏµúÍ∑º 200Í∞ú Îç∞Ïù¥ÌÑ∞Îßå Ïú†ÏßÄ
        if len(self.price_history[symbol]) > 200:
            self.price_history[symbol] = self.price_history[symbol][-200:]
            self.volume_history[symbol] = self.volume_history[symbol][-200:]

class TechnicalAnalysisEngine:
    """Í∏∞Ïà†Ï†Å Î∂ÑÏÑù ÏóîÏßÑ - Í≤ÄÏ¶ùÎêú ÏßÄÌëúÎì§"""
    
    @staticmethod
    def calculate_rsi(prices: List[float], period: int = 14) -> float:
        """RSI (Relative Strength Index) Í≥ÑÏÇ∞"""
        if len(prices) < period + 1:
            return 50.0
        
        deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        gains = [d if d > 0 else 0 for d in deltas]
        losses = [-d if d < 0 else 0 for d in deltas]
        
        avg_gain = sum(gains[-period:]) / period
        avg_loss = sum(losses[-period:]) / period
        
        if avg_loss == 0:
            return 100.0
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    @staticmethod
    def calculate_sma(prices: List[float], period: int) -> float:
        """Simple Moving Average"""
        if len(prices) < period:
            return prices[-1] if prices else 0
        return sum(prices[-period:]) / period
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> float:
        """Exponential Moving Average"""
        if len(prices) < period:
            return prices[-1] if prices else 0
        
        multiplier = 2 / (period + 1)
        ema = prices[0]
        
        for price in prices[1:]:
            ema = (price * multiplier) + (ema * (1 - multiplier))
        
        return ema
    
    @staticmethod
    def calculate_bollinger_bands(prices: List[float], period: int = 20, std_dev: int = 2) -> Tuple[float, float]:
        """Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú"""
        if len(prices) < period:
            return prices[-1] * 1.02, prices[-1] * 0.98 if prices else (0, 0)
        
        sma = sum(prices[-period:]) / period
        variance = sum([(p - sma) ** 2 for p in prices[-period:]]) / period
        std = variance ** 0.5
        
        upper = sma + (std * std_dev)
        lower = sma - (std * std_dev)
        
        return upper, lower
    
    def analyze_symbol(self, symbol: str, price_history: List[float], 
                      volume_history: List[float]) -> TechnicalIndicators:
        """Ï¢ÖÌï© Í∏∞Ïà†Ï†Å Î∂ÑÏÑù"""
        if not price_history or len(price_history) < 2:
            return TechnicalIndicators(50, 0, 0, 0, 0, 0, 0, 0)
        
        current_price = price_history[-1]
        
        # RSI
        rsi = self.calculate_rsi(price_history)
        
        # Ïù¥ÎèôÌèâÍ∑†Îì§
        sma_20 = self.calculate_sma(price_history, 20)
        ema_12 = self.calculate_ema(price_history, 12)
        ema_26 = self.calculate_ema(price_history, 26)
        
        # MACD
        macd = ema_12 - ema_26
        
        # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú
        bb_upper, bb_lower = self.calculate_bollinger_bands(price_history)
        
        # Î≥ºÎ•® Ïù¥ÎèôÌèâÍ∑†
        volume_sma = self.calculate_sma(volume_history, 20) if volume_history else 0
        
        return TechnicalIndicators(
            rsi=rsi,
            sma_20=sma_20,
            ema_12=ema_12,
            ema_26=ema_26,
            macd=macd,
            bb_upper=bb_upper,
            bb_lower=bb_lower,
            volume_sma=volume_sma
        )

class SmartTradingStrategy:
    """Ïä§ÎßàÌä∏ Ìä∏Î†àÏù¥Îî© Ï†ÑÎûµ - Ïã§Ï†ú ÏàòÏùµ Ï∞ΩÏ∂ú Î™©Ìëú"""
    
    def __init__(self):
        self.ta_engine = TechnicalAnalysisEngine()
        self.min_confidence = 0.6  # ÏµúÏÜå Ïã†Î¢∞ÎèÑ
        
    def generate_signal(self, symbol: str, market_data: MarketData, 
                       price_history: List[float], volume_history: List[float]) -> TradingSignal:
        """Ïä§ÎßàÌä∏ Ïã†Ìò∏ ÏÉùÏÑ±"""
        
        # Í∏∞Ïà†Ï†Å Î∂ÑÏÑù
        indicators = self.ta_engine.analyze_symbol(symbol, price_history, volume_history)
        current_price = market_data.price
        
        # Îã§Ï§ë Ïã†Ìò∏ Î∂ÑÏÑù
        signals = []
        confidence_factors = []
        
        # 1. RSI Í∏∞Î∞ò Ïã†Ìò∏
        if indicators.rsi < 30:  # Í≥ºÎß§ÎèÑ
            signals.append('buy')
            confidence_factors.append(0.8)
        elif indicators.rsi > 70:  # Í≥ºÎß§Ïàò
            signals.append('sell')
            confidence_factors.append(0.8)
        else:
            signals.append('hold')
            confidence_factors.append(0.1)
        
        # 2. Ïù¥ÎèôÌèâÍ∑† ÌÅ¨Î°úÏä§Ïò§Î≤Ñ
        if indicators.ema_12 > indicators.ema_26 and current_price > indicators.sma_20:
            signals.append('buy')
            confidence_factors.append(0.6)
        elif indicators.ema_12 < indicators.ema_26 and current_price < indicators.sma_20:
            signals.append('sell')
            confidence_factors.append(0.6)
        else:
            signals.append('hold')
            confidence_factors.append(0.1)
        
        # 3. Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú Ïã†Ìò∏
        if current_price <= indicators.bb_lower:  # ÌïòÎã® ÌÑ∞Ïπò - Îß§Ïàò
            signals.append('buy')
            confidence_factors.append(0.7)
        elif current_price >= indicators.bb_upper:  # ÏÉÅÎã® ÌÑ∞Ïπò - Îß§ÎèÑ
            signals.append('sell')
            confidence_factors.append(0.7)
        else:
            signals.append('hold')
            confidence_factors.append(0.2)
        
        # 4. 24ÏãúÍ∞Ñ Î≥ÄÎèôÎ•† Î∂ÑÏÑù
        if market_data.change_24h < -5:  # 5% Ïù¥ÏÉÅ ÌïòÎùΩ - Îß§Ïàò Í∏∞Ìöå
            signals.append('buy')
            confidence_factors.append(0.5)
        elif market_data.change_24h > 5:  # 5% Ïù¥ÏÉÅ ÏÉÅÏäπ - Îß§ÎèÑ Í≥†Î†§
            signals.append('sell')
            confidence_factors.append(0.4)
        else:
            signals.append('hold')
            confidence_factors.append(0.1)
        
        # Ï¢ÖÌï© ÌåêÎã®
        buy_score = sum(cf for sig, cf in zip(signals, confidence_factors) if sig == 'buy')
        sell_score = sum(cf for sig, cf in zip(signals, confidence_factors) if sig == 'sell')
        hold_score = sum(cf for sig, cf in zip(signals, confidence_factors) if sig == 'hold')
        
        # ÏµúÏ¢Ö Í≤∞Ï†ï
        if buy_score > sell_score and buy_score > hold_score and buy_score > self.min_confidence:
            action = 'buy'
            confidence = min(buy_score / len(signals), 0.95)
            price_target = current_price * 1.02  # 2% Î™©Ìëú
            stop_loss = current_price * 0.99   # 1% ÏÜêÏ†à
            reasoning = f"RSI:{indicators.rsi:.1f}, MACD:{indicators.macd:.2f}, 24h:{market_data.change_24h:.1f}%"
            
        elif sell_score > buy_score and sell_score > hold_score and sell_score > self.min_confidence:
            action = 'sell'
            confidence = min(sell_score / len(signals), 0.95)
            price_target = current_price * 0.98  # 2% Î™©Ìëú
            stop_loss = current_price * 1.01   # 1% ÏÜêÏ†à
            reasoning = f"RSI:{indicators.rsi:.1f}, MACD:{indicators.macd:.2f}, 24h:{market_data.change_24h:.1f}%"
            
        else:
            action = 'hold'
            confidence = 0.3
            price_target = current_price
            stop_loss = current_price * 0.95
            reasoning = f"Ïã†Ìò∏ Î∂àÎ™ÖÌôï, RSI:{indicators.rsi:.1f}"
        
        return TradingSignal(
            symbol=symbol,
            action=action,
            confidence=confidence,
            price_target=price_target,
            stop_loss=stop_loss,
            reasoning=reasoning,
            timestamp=datetime.now()
        )

class RealisticTradingBot:
    """ÌòÑÏã§Ï†ÅÏù∏ Ìä∏Î†àÏù¥Îî© Î¥á - Ïã§Ï†ú ÏàòÏùµ Ï∂îÍµ¨"""
    
    def __init__(self):
        self.running = False
        self.start_time = None
        self.market_provider = RealMarketDataProvider()
        self.strategy = SmartTradingStrategy()
        
        # Í≥ÑÏ¢å Ï†ïÎ≥¥
        self.initial_balance = 1000.0  # $1000ÏúºÎ°ú ÏãúÏûë (ÌòÑÏã§Ï†Å)
        self.current_balance = 1000.0
        self.total_trades = 0
        self.successful_trades = 0
        self.positions = {}
        
        # ÏÑ±Í≥º Ï∂îÏ†Å
        self.daily_pnl = 0.0
        self.max_drawdown = 0.0
        self.equity_curve = [1000.0]
        
        # Í±∞Îûò ÎÇ¥Ïó≠
        self.trade_history = []
        self.signal_history = []
        
        # ÏßÄÏõê Ïã¨Î≥º
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        self.current_data = {}
    
    async def start(self):
        """Î¥á ÏãúÏûë"""
        self.running = True
        self.start_time = datetime.now()
        logger.info("üöÄ ÌòÑÏã§Ï†Å Ìä∏Î†àÏù¥Îî© Î¥á ÏãúÏûë")
        
        # Î∞±Í∑∏ÎùºÏö¥Îìú ÌÉúÏä§ÌÅ¨Îì§
        asyncio.create_task(self._market_data_loop())
        asyncio.create_task(self._trading_loop())
        asyncio.create_task(self._performance_tracking())
    
    async def stop(self):
        """Î¥á Ï§ëÏßÄ"""
        self.running = False
        logger.info("‚èπÔ∏è Ìä∏Î†àÏù¥Îî© Î¥á Ï§ëÏßÄ")
    
    async def _market_data_loop(self):
        """Ïã§ÏãúÍ∞Ñ ÏãúÏû• Îç∞Ïù¥ÌÑ∞ ÏàòÏßë"""
        while self.running:
            try:
                for symbol in self.symbols:
                    data = await self.market_provider.get_market_data(symbol)
                    if data:
                        self.current_data[symbol] = data
                        logger.info(f"üìä {symbol}: ${data.price:,.2f} ({data.change_24h:+.2f}%)")
                
                await asyncio.sleep(30)  # 30Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏ (API Ï†úÌïú Í≥†Î†§)
                
            except Exception as e:
                logger.error(f"ÏãúÏû• Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏóêÎü¨: {e}")
                await asyncio.sleep(60)
    
    async def _trading_loop(self):
        """Î©îÏù∏ Ìä∏Î†àÏù¥Îî© Î£®ÌîÑ"""
        await asyncio.sleep(60)  # Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÎåÄÍ∏∞
        
        while self.running:
            try:
                for symbol in self.symbols:
                    if symbol in self.current_data:
                        await self._analyze_and_trade(symbol)
                
                await asyncio.sleep(120)  # 2Î∂ÑÎßàÎã§ Î∂ÑÏÑù
                
            except Exception as e:
                logger.error(f"Ìä∏Î†àÏù¥Îî© Î£®ÌîÑ ÏóêÎü¨: {e}")
                await asyncio.sleep(300)
    
    async def _analyze_and_trade(self, symbol: str):
        """Í∞úÎ≥Ñ Ïã¨Î≥º Î∂ÑÏÑù Î∞è Í±∞Îûò"""
        try:
            market_data = self.current_data[symbol]
            price_history = self.market_provider.price_history.get(symbol, [])
            volume_history = self.market_provider.volume_history.get(symbol, [])
            
            if len(price_history) < 20:  # Ï∂©Î∂ÑÌïú Îç∞Ïù¥ÌÑ∞ ÎåÄÍ∏∞
                return
            
            # Ïã†Ìò∏ ÏÉùÏÑ±
            signal = self.strategy.generate_signal(symbol, market_data, price_history, volume_history)
            self.signal_history.append(signal)
            
            # ÎÜíÏùÄ Ïã†Î¢∞ÎèÑ Ïã†Ìò∏Îßå Í±∞Îûò
            if signal.confidence > 0.7:
                await self._execute_paper_trade(signal, market_data)
            
            logger.info(f"üéØ {symbol} Ïã†Ìò∏: {signal.action} (Ïã†Î¢∞ÎèÑ: {signal.confidence:.2f}) - {signal.reasoning}")
            
        except Exception as e:
            logger.error(f"Î∂ÑÏÑù ÏóêÎü¨ {symbol}: {e}")
    
    async def _execute_paper_trade(self, signal: TradingSignal, market_data: MarketData):
        """Paper Trading Ïã§Ìñâ (ÏïàÏ†ÑÌïú Í∞ÄÏÉÅ Í±∞Îûò)"""
        try:
            current_price = market_data.price
            trade_amount = min(100, self.current_balance * 0.1)  # ÏµúÎåÄ 10% ÎòêÎäî $100
            
            if signal.action == 'buy' and trade_amount <= self.current_balance:
                quantity = trade_amount / current_price
                
                trade = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': signal.symbol,
                    'action': 'buy',
                    'quantity': quantity,
                    'price': current_price,
                    'amount': trade_amount,
                    'confidence': signal.confidence,
                    'reasoning': signal.reasoning
                }
                
                self.current_balance -= trade_amount
                self.positions[signal.symbol] = {
                    'quantity': quantity,
                    'entry_price': current_price,
                    'entry_time': datetime.now(),
                    'target': signal.price_target,
                    'stop_loss': signal.stop_loss
                }
                
                self.trade_history.append(trade)
                self.total_trades += 1
                
                logger.info(f"üí∞ Îß§Ïàò Ïã§Ìñâ: {signal.symbol} {quantity:.6f} @ ${current_price:,.2f}")
            
            elif signal.action == 'sell' and signal.symbol in self.positions:
                position = self.positions[signal.symbol]
                quantity = position['quantity']
                entry_price = position['entry_price']
                
                trade_amount = quantity * current_price
                profit = trade_amount - (quantity * entry_price)
                profit_pct = (profit / (quantity * entry_price)) * 100
                
                trade = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': signal.symbol,
                    'action': 'sell',
                    'quantity': quantity,
                    'price': current_price,
                    'amount': trade_amount,
                    'profit': profit,
                    'profit_pct': profit_pct,
                    'confidence': signal.confidence,
                    'reasoning': signal.reasoning
                }
                
                self.current_balance += trade_amount
                self.daily_pnl += profit
                
                if profit > 0:
                    self.successful_trades += 1
                
                del self.positions[signal.symbol]
                self.trade_history.append(trade)
                self.total_trades += 1
                
                logger.info(f"üí∏ Îß§ÎèÑ Ïã§Ìñâ: {signal.symbol} {quantity:.6f} @ ${current_price:,.2f} (ÏàòÏùµ: ${profit:,.2f} / {profit_pct:+.2f}%)")
                
        except Exception as e:
            logger.error(f"Í±∞Îûò Ïã§Ìñâ ÏóêÎü¨: {e}")
    
    async def _performance_tracking(self):
        """ÏÑ±Í≥º Ï∂îÏ†Å"""
        while self.running:
            try:
                # ÌòÑÏû¨ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∞ÄÏπò Í≥ÑÏÇ∞
                portfolio_value = self.current_balance
                
                for symbol, position in self.positions.items():
                    if symbol in self.current_data:
                        current_price = self.current_data[symbol].price
                        position_value = position['quantity'] * current_price
                        portfolio_value += position_value
                
                # ÏàòÏùµÎ•† Í≥ÑÏÇ∞
                total_return = (portfolio_value - self.initial_balance) / self.initial_balance * 100
                
                # ÏµúÎåÄ ÎÇôÌè≠ ÏóÖÎç∞Ïù¥Ìä∏
                if len(self.equity_curve) > 0:
                    peak = max(self.equity_curve)
                    drawdown = (peak - portfolio_value) / peak * 100
                    self.max_drawdown = max(self.max_drawdown, drawdown)
                
                self.equity_curve.append(portfolio_value)
                
                # ÏµúÍ∑º 100Í∞ú Îç∞Ïù¥ÌÑ∞Îßå Ïú†ÏßÄ
                if len(self.equity_curve) > 100:
                    self.equity_curve = self.equity_curve[-100:]
                
                await asyncio.sleep(300)  # 5Î∂ÑÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
                
            except Exception as e:
                logger.error(f"ÏÑ±Í≥º Ï∂îÏ†Å ÏóêÎü¨: {e}")
                await asyncio.sleep(600)
    
    def get_status(self) -> Dict:
        """Î¥á ÏÉÅÌÉú Î∞òÌôò"""
        uptime = (datetime.now() - self.start_time).total_seconds() if self.start_time else 0
        win_rate = (self.successful_trades / self.total_trades * 100) if self.total_trades > 0 else 0
        
        # ÌòÑÏû¨ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∞ÄÏπò
        portfolio_value = self.current_balance
        for symbol, position in self.positions.items():
            if symbol in self.current_data:
                current_price = self.current_data[symbol].price
                portfolio_value += position['quantity'] * current_price
        
        total_return = (portfolio_value - self.initial_balance) / self.initial_balance * 100
        
        return {
            'running': self.running,
            'uptime': uptime,
            'initial_balance': self.initial_balance,
            'current_balance': self.current_balance,
            'portfolio_value': portfolio_value,
            'total_return': total_return,
            'total_trades': self.total_trades,
            'successful_trades': self.successful_trades,
            'win_rate': win_rate,
            'daily_pnl': self.daily_pnl,
            'max_drawdown': self.max_drawdown,
            'positions': len(self.positions),
            'current_prices': {symbol: data.price for symbol, data in self.current_data.items()},
            'recent_signals': [
                {
                    'symbol': s.symbol,
                    'action': s.action,
                    'confidence': s.confidence,
                    'reasoning': s.reasoning,
                    'timestamp': s.timestamp.isoformat()
                }
                for s in self.signal_history[-5:]
            ]
        }

# FastAPI Ïï±
app = FastAPI(title="Realistic Profitable Trading System")
bot = RealisticTradingBot()

@app.on_event("startup")
async def startup():
    """ÏãúÏä§ÌÖú ÏãúÏûë"""
    await bot.start()

@app.get("/")
async def dashboard():
    """Ïã§Ï†Ñ ÎåÄÏãúÎ≥¥Îìú"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>üí∞ Realistic Trading Bot</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #1a1a2e; color: white; }
            .header { text-align: center; margin-bottom: 30px; }
            .cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
            .card { background: #16213e; padding: 20px; border-radius: 10px; text-align: center; }
            .value { font-size: 1.5em; font-weight: bold; color: #00ff88; }
            .negative { color: #ff4444; }
            .positive { color: #00ff88; }
            .signals { background: #16213e; padding: 20px; border-radius: 10px; }
            .signal-item { padding: 10px; border-bottom: 1px solid #333; font-family: monospace; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üí∞ ÌòÑÏã§Ï†Å ÏàòÏùµ Ï∞ΩÏ∂ú Ìä∏Î†àÏù¥Îî© Î¥á</h1>
            <p>Ïã§Ï†ú ÏãúÏû• Îç∞Ïù¥ÌÑ∞ + Í≤ÄÏ¶ùÎêú Í∏∞Ïà†Ï†Å Î∂ÑÏÑù</p>
        </div>
        
        <div class="cards">
            <div class="card">
                <h3>Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∞ÄÏπò</h3>
                <div class="value" id="portfolio-value">$0</div>
            </div>
            <div class="card">
                <h3>Ï¥ù ÏàòÏùµÎ•†</h3>
                <div class="value" id="total-return">0%</div>
            </div>
            <div class="card">
                <h3>ÏäπÎ•†</h3>
                <div class="value" id="win-rate">0%</div>
            </div>
            <div class="card">
                <h3>ÏùºÏùº P&L</h3>
                <div class="value" id="daily-pnl">$0</div>
            </div>
        </div>
        
        <div class="signals">
            <h3>üìä Ïã§ÏãúÍ∞Ñ Ïã†Ìò∏ Î∂ÑÏÑù</h3>
            <div id="signals-list">Î°úÎî© Ï§ë...</div>
        </div>
        
        <script>
            function updateDashboard() {
                fetch('/api/status')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('portfolio-value').textContent = '$' + data.portfolio_value.toFixed(2);
                        
                        const returnElement = document.getElementById('total-return');
                        returnElement.textContent = data.total_return.toFixed(2) + '%';
                        returnElement.className = data.total_return >= 0 ? 'value positive' : 'value negative';
                        
                        document.getElementById('win-rate').textContent = data.win_rate.toFixed(1) + '%';
                        
                        const pnlElement = document.getElementById('daily-pnl');
                        pnlElement.textContent = '$' + data.daily_pnl.toFixed(2);
                        pnlElement.className = data.daily_pnl >= 0 ? 'value positive' : 'value negative';
                        
                        // Ïã†Ìò∏ ÏóÖÎç∞Ïù¥Ìä∏
                        const signalsList = document.getElementById('signals-list');
                        if (data.recent_signals && data.recent_signals.length > 0) {
                            signalsList.innerHTML = data.recent_signals.map(signal => 
                                `<div class="signal-item">
                                    ${new Date(signal.timestamp).toLocaleTimeString()} | 
                                    ${signal.symbol} ${signal.action.toUpperCase()} 
                                    (Ïã†Î¢∞ÎèÑ: ${(signal.confidence * 100).toFixed(0)}%) - ${signal.reasoning}
                                </div>`
                            ).join('');
                        }
                    });
            }
            
            // 10Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
            setInterval(updateDashboard, 10000);
            updateDashboard();
        </script>
    </body>
    </html>
    """)

@app.get("/health")
async def health_check():
    """Ìó¨Ïä§Ï≤¥ÌÅ¨"""
    return {
        "status": "healthy",
        "service": "Realistic Profitable Trading Bot",
        "timestamp": datetime.now().isoformat(),
        "bot_running": bot.running
    }

@app.get("/api/status")
async def get_status():
    """Î¥á ÏÉÅÌÉú API"""
    return bot.get_status()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8001))
    
    print(f"""
    üí∞ ÌòÑÏã§Ï†Å ÏàòÏùµ Ï∞ΩÏ∂ú Ìä∏Î†àÏù¥Îî© ÏãúÏä§ÌÖú
    
    ‚úÖ Ïã§Ï†ú Î∞îÏù¥ÎÇ∏Ïä§/ÏΩîÏù∏Î≤†Ïù¥Ïä§ Îç∞Ïù¥ÌÑ∞
    ‚úÖ Í≤ÄÏ¶ùÎêú Í∏∞Ïà†Ï†Å Î∂ÑÏÑù (RSI, MACD, Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú)
    ‚úÖ Ïä§ÎßàÌä∏ Ïã†Ìò∏ ÏÉùÏÑ±
    ‚úÖ Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨ (1-2% ÏÜêÏ†à)
    ‚úÖ $1000 ÏãúÎìúÎ®∏ÎãàÎ°ú ÌòÑÏã§Ï†Å ÏãúÏûë
    
    Î™©Ìëú: Ïõî 5-10% ÏïàÏ†ïÏ†Å ÏàòÏùµ
    """)
    
    uvicorn.run(app, host="0.0.0.0", port=port)